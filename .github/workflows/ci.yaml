name: CloudFormation CI Pipeine (Reusable)
description: |
  This is a reusable GitHub Actions workflow for CI/CD using CloudFormation.
  It includes steps for linting, validating, scanning, and building AWS resources.
  The workflow is designed to be triggered by other workflows or manually.
  It also includes steps for checking environments, detecting changes, and preparing builds.

on:
  workflow_call:
    inputs:
      environment:
        description: "Environment to deploy to (e.g., dev, prod)."
        required: true
        type: string
        default: ci
      cfn-template-file:
        description: "CloudFormation template file name."
        required: true
        type: string
        default: "root-stack-template.yaml"
      cfn-params-file:
        description: "CloudFormation parameters file."
        required: true
        type: string
        default: "./cfn/params/cfn-parameters.json"
      snyk-token:
        description: "Snyk token for authentication."
        required: false
        type: string


permissions:
  id-token: write

jobs:
  check-environments:
    name: 🔎 Check Environments
    runs-on: ubuntu-latest
    steps:
      - name: Check Available Environments
        id: check
        uses: subhamay-bhattacharyya-gha/check-environments-action@main
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  check-branch-issue:
    name: 🔎 Branch Issue
    runs-on: ubuntu-latest
    steps:
      - name: Verify branch issue
        id: branch-issue
        uses: subhamay-bhattacharyya-gha/branch-issue-action@main
        
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Print Outputs
        run: |
          echo "Branch Issue: ${{ steps.branch-issue.outputs.issue-number }}"
          echo "Branch Issue: ${{ steps.branch-issue.outputs.issue-exists }}"


  repo-changes:
    name: 🔎 Repo Changes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Print changed files # To properly debug what is being deployed (It can be removed).
        run: |
          echo "List of changed files:" 
          git diff --name-only HEAD^ HEAD
          echo "==============================================="
          git diff-tree --no-commit-id --name-only -r HEAD

      # - name: Detect modified files
      #   id: detect
      #   uses: subhamay-bhattacharyya-gha/list-updated-files-action@feature/SB-0001-initial-release
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}

      # - name: Display modified files
      #   run: |
      #     echo "Modified files:"
      #     echo "${{ steps.detect.outputs.modified_files }}"

  detect-services:
    name: 🔎 Detect Services
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Scan AWS Services
        id: scan
        uses: subhamay-bhattacharyya-gha/scan-aws-services-action@main

      - name: Save Detected Services to Environment Variable
        run: |
          echo "Detected Services: ${{ steps.scan.outputs.services-used }}"
          echo 'SERVICES_USED=${{ steps.scan.outputs.services-used }}' >> $GITHUB_ENV
        
      - name: Print AWS Service Detection Table
        run: |
          echo "## AWS Services Detected" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Service               | Used |" >> $GITHUB_STEP_SUMMARY
          echo "|------------------------|------|" >> $GITHUB_STEP_SUMMARY

          node -e "
            try {
              const result = JSON.parse(process.env.SERVICES_USED);
              const emoji = (val) => val ? '✅' : '❌';
              const rows = Object.entries(result)
                .map(([key, val]) => \`| \${key.padEnd(22)} | \${emoji(val)} |\`)
                .join('\n');
              console.log(rows);
            } catch (e) {
              console.error('❌ Failed to parse SERVICES_USED:', e.message);
              process.exit(1);
            }
          " >> $GITHUB_STEP_SUMMARY
  

  cfn-lint:
    name: 📋 CFN Lint
    runs-on: ubuntu-latest
    needs:
      [check-environments, check-branch-issue, repo-changes, detect-services]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

  cfn-validate:
    name: ✔️ CFN Validate
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    needs:
      [check-environments, check-branch-issue, repo-changes, detect-services]
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

  checkov-scan:
    name: 🧳 Checkov Scan
    runs-on: ubuntu-latest
    needs:
      [check-environments, check-branch-issue, repo-changes, detect-services]
    steps:
      - name: Checkout Code
        run: echo "Checkov Scan"

  snyk-scan:
    name: 🧾 Snyk IaC Scan
    runs-on: ubuntu-latest
    needs:
      [check-environments, check-branch-issue, repo-changes, detect-services]
    # env:
    #   SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    #   SNYK_ORG_ID: ${{ secrets.SNYK_ORGANIZATION_ID }}
    steps:
      - name: Snyk Scan
        run: echo "Snyk Scan"

  guard-rail:
    name: 💂🏻‍♀️ Infra Guard Rail
    runs-on: ubuntu-latest
    needs:
      [check-environments, check-branch-issue, repo-changes, detect-services]
    steps:
      - name: Guardrail
        run: echo "Guard Rail"

  prepare-builds:
    name: 🛠️ Prepare Build Jobs
    runs-on: ubuntu-latest
    needs:
      - cfn-lint
      - cfn-validate
      - checkov-scan
      - snyk-scan
      - guard-rail
    steps:
      - name: Preparation Complete
        run: echo "Build jobs can now run."

  build-lambda:
    name: 🛠️ Lambda Package
    runs-on: ubuntu-latest
    # if: ${{ inputs.lambda == true }}
    needs: prepare-builds
    steps:
      - name: Build Lambda Package
        run: echo "Building Lambda package..."

  build-lambda-layer:
    name: 🛠️ Lambda Layer
    runs-on: ubuntu-latest
    # if: ${{ inputs.lambda == true }}
    needs: prepare-builds
    steps:
      - name: Build Lambda Layer
        run: echo "Building Lambda layer..."

  build-glue:
    name: 🛠️ Glue Script
    runs-on: ubuntu-latest
    # if: ${{ inputs.glue == true }}
    needs: prepare-builds
    steps:
      - name: Package Glue Script
        run: echo "Packaging Glue script..."

  build-state-machine:
    name: 🛠️ State Machine
    runs-on: ubuntu-latest
    # if: ${{ inputs.state-machine == true }}
    needs: prepare-builds
    steps:
      - name: Deploy State Machine
        run: echo "Deploying State Machine..."

  ci-build:
    name: 📦 CI Build
    runs-on: ubuntu-latest
    if: always()
    needs:
      - build-lambda
      - build-lambda-layer
      - build-glue
      - build-state-machine
    steps:
      - name: Finalize CI Build
        run: echo "CI build completed regardless of individual builds."

  infra-cost:
    name: 💰 Infra Cost
    runs-on: ubuntu-latest
    if: always()
    needs: ci-build
    steps:
      - name: Determine Infra Cost
        run: echo "Determine Infra Cost."

  release-button:
    name: 🚀 Create Release button
    runs-on: ubuntu-latest
    if: always()
    needs: infra-cost
    steps:
      - name: Create Release Button
        run: echo "Create Release Button."
